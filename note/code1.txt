Collection<PsiFile> tsFiles = FilenameIndex.getAllFiles(project, new FileTypeFilter(TypeScriptFileType.INSTANCE), GlobalSearchScope.projectScope(project))
    .stream()
    .map(file -> PsiManager.getInstance(project).findFile(file))
    .collect(Collectors.toList());

for (PsiFile file : tsFiles) {
    Collection<PsiElement> decoratorElements = PsiTreeUtil.findChildrenOfType(file, MyTypeScriptDecorator.class); // 替换为对应的 PSI 类
    for (PsiElement decorator : decoratorElements) {
        // 判断装饰器的名称是否为 "Action"
        if ("Action".equals(getDecoratorName(decorator))) {
            // 获取装饰器的参数列表
            String paramText = getDecoratorParameterText(decorator);
            // 如果参数中包含 SystemAction.Loading，则认为匹配
            if (paramText != null && paramText.contains("SystemAction.Loading")) {
                // 找到目标位置，可保存到一个 List 中，后续通过 CustomNavigateItem 进行跳转
            }
        }
    }
}

@Override
public PsiElement @Nullable [] getGotoDeclarationTargets(@Nullable PsiElement psiElement, int offset, Editor editor) {
    if (psiElement == null || !"Loading".equals(psiElement.getText())) {
        return null;
    }
    Project project = psiElement.getProject();
    PsiElement targetAction = findTargetElement(project, "system.action.ts", "export class Loading");

    // 动态查找 state 中的实现
    PsiElement targetState = findDynamicStateTarget(project, "SystemAction.Loading");

    if (targetAction == null && targetState == null) {
        return null;
    }
    if (targetAction != null && targetState != null) {
        return new PsiElement[]{
            new CustomNavigateItem(targetAction, "Action"),
            new CustomNavigateItem(targetState, "Implement")
        };
    } else if (targetAction != null) {
        return new PsiElement[]{new CustomNavigateItem(targetAction, "Action")};
    } else {
        return new PsiElement[]{new CustomNavigateItem(targetState, "Implement")};
    }
}
